// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace Sora.Database.Migrations
{
    [DbContext(typeof(SoraDbContext))]
    internal partial class SoraDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Sora.Database.Models.DbAchievement", b =>
            {
                b.Property<string>("Name")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("DisplayName")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("IconURI")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("IconUri")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.HasKey("Name");

                b.ToTable("Achievements");
            });

            modelBuilder.Entity("Sora.Database.Models.DbBeatmap", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Artist")
                    .IsRequired()
                    .HasColumnType("varchar(255)");

                b.Property<string>("DiffName")
                    .IsRequired()
                    .HasColumnType("varchar(255)");

                b.Property<string>("FileMd5")
                    .IsRequired()
                    .HasColumnType("varchar(32)");

                b.Property<string>("FileName")
                    .IsRequired()
                    .HasColumnType("varchat(255)");

                b.Property<int>("Flags")
                    .HasColumnType("int");

                b.Property<byte>("PlayMode")
                    .HasColumnType("tinyint unsigned");

                b.Property<int>("RankedStatus")
                    .HasColumnType("int");

                b.Property<int>("SetId")
                    .HasColumnType("int");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasColumnType("varchar(255)");

                b.HasKey("Id");

                b.ToTable("Beatmaps");
            });

            modelBuilder.Entity("Sora.Database.Models.DbFriend", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("FriendId")
                    .HasColumnType("int");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("FriendId");

                b.HasIndex("UserId");

                b.ToTable("Friends");
            });

            modelBuilder.Entity("Sora.Database.Models.DbLeaderboard", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<int>("OwnerId")
                    .HasColumnType("int");

                b.Property<double>("PerformancePointsCtb")
                    .HasColumnType("double");

                b.Property<double>("PerformancePointsMania")
                    .HasColumnType("double");

                b.Property<double>("PerformancePointsOsu")
                    .HasColumnType("double");

                b.Property<double>("PerformancePointsTaiko")
                    .HasColumnType("double");

                b.Property<ulong>("PlayCountCtb")
                    .HasColumnType("bigint unsigned");

                b.Property<ulong>("PlayCountMania")
                    .HasColumnType("bigint unsigned");

                b.Property<ulong>("PlayCountOsu")
                    .HasColumnType("bigint unsigned");

                b.Property<ulong>("PlayCountTaiko")
                    .HasColumnType("bigint unsigned");

                b.Property<ulong>("RankedScoreCtb")
                    .HasColumnType("bigint unsigned");

                b.Property<ulong>("RankedScoreMania")
                    .HasColumnType("bigint unsigned");

                b.Property<ulong>("RankedScoreOsu")
                    .HasColumnType("bigint unsigned");

                b.Property<ulong>("RankedScoreTaiko")
                    .HasColumnType("bigint unsigned");

                b.Property<ulong>("TotalScoreCtb")
                    .HasColumnType("bigint unsigned");

                b.Property<ulong>("TotalScoreMania")
                    .HasColumnType("bigint unsigned");

                b.Property<ulong>("TotalScoreOsu")
                    .HasColumnType("bigint unsigned");

                b.Property<ulong>("TotalScoreTaiko")
                    .HasColumnType("bigint unsigned");

                b.HasKey("Id");

                b.HasIndex("OwnerId");

                b.ToTable("Leaderboard");
            });

            modelBuilder.Entity("Sora.Database.Models.DbScore", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<double>("Accuracy")
                    .HasColumnType("double");

                b.Property<int>("Count100")
                    .HasColumnType("int");

                b.Property<int>("Count300")
                    .HasColumnType("int");

                b.Property<int>("Count50")
                    .HasColumnType("int");

                b.Property<int>("CountGeki")
                    .HasColumnType("int");

                b.Property<int>("CountKatu")
                    .HasColumnType("int");

                b.Property<int>("CountMiss")
                    .HasColumnType("int");

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime(6)");

                b.Property<string>("FileMd5")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<short>("MaxCombo")
                    .HasColumnType("smallint");

                b.Property<uint>("Mods")
                    .HasColumnType("int unsigned");

                b.Property<double>("PerformancePoints")
                    .HasColumnType("double");

                b.Property<byte>("PlayMode")
                    .HasColumnType("tinyint unsigned");

                b.Property<string>("ReplayMd5")
                    .HasColumnType("varchar(32)");

                b.Property<int>("TotalScore")
                    .HasColumnType("int");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Scores");
            });

            modelBuilder.Entity("Sora.Database.Models.DbUser", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                b.Property<string>("Achievements")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<string>("EMail")
                    .IsRequired()
                    .HasColumnType("varchar(64)");

                b.Property<string>("Password")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<byte[]>("PasswordSalt")
                    .HasColumnType("longblob");

                b.Property<int>("PasswordVersion")
                    .HasColumnType("int");

                b.Property<string>("Permissions")
                    .IsRequired()
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<int>("Status")
                    .HasColumnType("int");

                b.Property<string>("StatusReason")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.Property<DateTime?>("StatusUntil")
                    .HasColumnType("datetime(6)");

                b.Property<string>("UserName")
                    .IsRequired()
                    .HasColumnType("varchar(32)");

                b.HasKey("Id");

                b.ToTable("Users");
            });

            modelBuilder.Entity("Sora.Database.Models.DboAuthClient", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("char(36)");

                b.Property<bool>("Disabled")
                    .HasColumnType("tinyint(1)");

                b.Property<int>("Flags")
                    .HasColumnType("int");

                b.Property<int>("OwnerId")
                    .HasColumnType("int");

                b.Property<string>("Secret")
                    .HasColumnType("longtext CHARACTER SET utf8mb4");

                b.HasKey("Id");

                b.HasIndex("OwnerId");

                b.ToTable("OAuthClients");
            });

            modelBuilder.Entity("Sora.Database.Models.DbFriend", b =>
            {
                b.HasOne("Sora.Database.Models.DbUser", "Friend")
                    .WithMany()
                    .HasForeignKey("FriendId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Sora.Database.Models.DbUser", "User")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Sora.Database.Models.DbLeaderboard", b =>
            {
                b.HasOne("Sora.Database.Models.DbUser", "Owner")
                    .WithMany()
                    .HasForeignKey("OwnerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Sora.Database.Models.DbScore", b =>
            {
                b.HasOne("Sora.Database.Models.DbUser", "ScoreOwner")
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Sora.Database.Models.DboAuthClient", b =>
            {
                b.HasOne("Sora.Database.Models.DbUser", "Owner")
                    .WithMany()
                    .HasForeignKey("OwnerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}